import { motion } from "framer-motion";
import Head from "next/head";
import Image from "next/image";
import React from "react";
import styles from "../styles/Home.module.css";

export default function Home() {
  return (
    <div className={styles.background}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <SolarSystem></SolarSystem>
    </div>
  );
}

class SolarSystem extends React.Component {
  state = {
    planets: [
      new Planet(0, 100, 200, 20, "red"),
      new Planet(0, 50, 400, 40, "yellow"),
    ],
    isMenuOpen: false,
    width: 0,
    height: 0,
  };

  constructor(props) {
    super(props);
  }

  componentDidMount() {
    this.updatePlanetsPositions();
    this.setState({
      width: window.innerWidth / 2,
      height: window.innerHeight / 2,
    });
  }

  updatePlanetsPositions() {
    let newPlanets = [];
    for (let planet of this.state.planets) {
      newPlanets.push(planet.updatePosition(0.1));
    }

    this.setState({ planets: newPlanets });

    setTimeout(() => {
      this.updatePlanetsPositions();
    }, 1);
  }

  render() {
    return (
      <div>
        <div>
          {this.state.planets.map((planet) =>
            FormPlanet(
              this.state.planets[this.state.planets.indexOf(planet)].x,
              this.state.planets[this.state.planets.indexOf(planet)].y,
              this.state.width,
              this.state.height,
              planet
            )
          )}
        </div>
        {this.state.isMenuOpen && <div></div>}
      </div>
    );
  }
}

function FormPlanet(x, y, centreX, centreY, planet) {
  return (
    <motion.div
      key={planet}
      className={styles.planet}
      animate={{
        x: x * planet.radius + centreX,
        y: y * planet.radius + centreY,
      }}
      style={{
        height: planet.size,
        width: planet.size,
        borderRadius: planet.size,
        backgroundColor: planet.colour,
      }}
    ></motion.div>
  );
}

class Planet {
  angle = 0;
  x = 1;
  y = 0;

  orbitalPeriod = 1;
  radius = 200;
  size = 20;
  colour = "red";

  constructor(angle, orbitalPeriod, radius, size, colour) {
    this.angle = angle;
    this.orbitalPeriod = orbitalPeriod;
    this.radius = radius;
    this.size = size;
    this.colour = colour;
  }

  updatePosition() {
    this.angle += 1 / this.orbitalPeriod;
    if (this.angle > 2 * Math.PI) {
      this.angle -= 2 * Math.PI;
    }
    this.x = Math.cos(this.angle);
    this.y = Math.sin(this.angle);
    return this;
  }
}
